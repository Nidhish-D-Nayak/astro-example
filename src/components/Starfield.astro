<div id="starfield" class="absolute inset-0 -z-10">
	<canvas id="starfield-canvas"></canvas>
</div>

<script>
	import invariant from "tiny-invariant";

	const COUNT = 75;
	const SPEED = 0.075;

	class Wave {
		x: number;
		y: number;
		radius: number;
		opacity: number;
		emittingStar: Star;

		constructor(x: number, y: number, radius: number, emittingStar: Star) {
			this.x = x;
			this.y = y;
			this.radius = radius;
			this.opacity = 1;
			this.emittingStar = emittingStar;
		}

		update() {
			this.radius += SPEED * 0.1;

			if (this.radius >= this.emittingStar.getRadius() * 10) {
				this.opacity = 0;
			} else {
				this.opacity =
					1 - (this.radius - 2) / (this.emittingStar.getRadius() * 10);
			}

			if (this.opacity <= 0) {
				waves.splice(waves.indexOf(this), 1);
			}
		}

		draw(ctx: CanvasRenderingContext2D) {
			ctx.strokeStyle = `rgba(0, 0, 0, ${this.opacity})`;
			ctx.beginPath();
			ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
			ctx.stroke();
		}
	}

	class Star {
		x: number;
		y: number;
		z: number;
		xPrev: number;
		yPrev: number;

		constructor(x = 0, y = 0, z = 0) {
			this.x = x;
			this.y = y;
			this.z = z;
			this.xPrev = x;
			this.yPrev = y;
		}

		getRadius() {
			return 1.25; // Return the default radius value
		}

		update(width: number, height: number, speed: number) {
			this.xPrev = this.x;
			this.yPrev = this.y;
			this.z += speed * 0.0675;
			this.x += this.x * (speed * 0.0225) * this.z;
			this.y += this.y * (speed * 0.0225) * this.z;
			if (
				this.x > width / 2 ||
				this.x < -width / 2 ||
				this.y > height / 2 ||
				this.y < -height / 2
			) {
				this.x = Math.random() * width - width / 2;
				this.y = Math.random() * height - height / 2;
				this.xPrev = this.x;
				this.yPrev = this.y;
				this.z = 0;
			}
		}

		draw(ctx: CanvasRenderingContext2D, radius: number) {
			ctx.fillStyle = "black"; // Set fill color to black
			ctx.beginPath();
			ctx.arc(this.x, this.y, radius, 0, Math.PI * 2); // Small filled circle
			ctx.fill();
		}
	}

	const stars = Array.from({ length: COUNT }, () => new Star(0, 0, 0));
	let rafId = 0;

	const canvas = document.querySelector(
		"#starfield-canvas"
	) as HTMLCanvasElement;
	invariant(canvas, "canvas should not be null");
	const ctx = canvas.getContext("2d");

	const container = document.querySelector("#starfield") as HTMLElement;
	invariant(container, "container should not be null");
	const resizeObserver = new ResizeObserver(setup);
	resizeObserver.observe(container);

	function setup() {
		invariant(ctx, "canvas context should not be null");
		rafId > 0 && cancelAnimationFrame(rafId);

		const { clientWidth: width, clientHeight: height } = container;
		const dpr = window.devicePixelRatio || 1;
		canvas.width = width * dpr;
		canvas.height = height * dpr;
		canvas.style.width = `${width}px`;
		canvas.style.height = `${height}px`;
		ctx.scale(dpr, dpr);

		for (const star of stars) {
			star.x = Math.random() * width - width / 2;
			star.y = Math.random() * height - height / 2;
			star.z = 0;
		}

		ctx.translate(width / 2, height / 2);
		ctx.fillStyle = "#eaeeed"; // Set the fill color to white
		ctx.strokeStyle = "transparent"; // Set the stroke color to transparent
		rafId = requestAnimationFrame(frame);
	}

	const waves: Wave[] = [];

	function frame() {
		invariant(ctx, "canvas context should not be null");
		const { clientWidth: width, clientHeight: height } = container;

		ctx.fillStyle = "#eaeeed";
		ctx.fillRect(-width / 2, -height / 2, width, height);

		for (const star of stars) {
			star.update(width, height, SPEED);
			star.draw(ctx, 1.25); // Pass the radius here

			if (Math.random() < 0.000075) {
				waves.push(new Wave(star.x, star.y, 2, star));
			}
		}

		for (let i = waves.length - 1; i >= 0; i--) {
			const wave = waves[i];
			wave.update();

			// Update wave position based on the emitting star's position
			wave.x = wave.emittingStar.x;
			wave.y = wave.emittingStar.y;

			wave.draw(ctx);

			if (wave.opacity <= 0) {
				waves.splice(i, 1);
			}
		}

		rafId = requestAnimationFrame(frame);
	}
</script>
